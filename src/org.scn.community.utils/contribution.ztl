/* GENERATED - DO NOT EDIT */
/**
 * Copyright 2014, Contributors
 * 
 * Original Source Code Location:
 *  https://github.com/sap-design-studio-free-addons/sdk-package
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at 
 *  
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License. 
 */


/**
 * Component created with collaboration with Michael Howles
 * http://scn.sap.com/people/mike.howles4
 * 
 * based on the blog thread http://scn.sap.com/community/businessobjects-design-studio/blog/2014/09/16/design-studio-sdk--bial-fornext-loop-and-my-first-github-co-author-attempt
 * 
 * Authors: Michael Howles, Scn Community Contributors
 */
class org.scn.community.utils.Array extends Component {  
	
	/**
	Returns the array content as loopable array.
	<example>
	You want to loop at the "k1;k2;k3" array:
	<code>
	var content = ARRAY_1.getValuesAsValueTextArray();<br>
	<br>
	// a loop for all values<br>
	content.forEach(function(element, index) {<br>
		LISTBOX_1.addItem(""+ index, element.value + "( " + index + " )");<br>
	});
	</code>
	This LISTBOX_1 has now following values entries:<br>
		<ul><li>key: 0; value: k1 ( 0 )</li>
		<<li>key: 1; value: k2 ( 1 )</li>
		<li>key: 2; value: k3 ( 2 )</li></ul>
	</example>
	*/
	org.scn.community.shared.ValueTextArray getValuesAsValueTextArray (
			/**max members*/ optional int maxMembers) {*
		var s = this.items;  
		var items = JSON.parse(s);
		
		var a = [];
		
		// APPLICATION.createInfoMessage("Max: " + maxMembers); // debug
		
		if(maxMembers == undefined || maxMembers <= 0) {
			maxMembers = items.length;
		}
		
		for(var i=0;i<maxMembers;i++){
			var itemDef = { 
				"value": items[i].value, 
				"text": items[i].value
			};
			
			a.push(itemDef);
		}
		
		return a;
	*}

	/**
	Returns the array content as loopable array. The element is directly containing the string value.
	Pro: compatible to the API in other scripts where object "ValueTextArray" is expected.
	<example>
	You want to loop at the "k1;k2;k3" array:
	<code>
	var content = ARRAY_1.getValuesAsSimpleValueTextArray();<br>
	<br>
	// a loop for all values<br>
	content.forEach(function(element, index) {<br>
		LISTBOX_1.addItem(""+ index, element + "( " + index + " )");<br>
	});
	</code>
	This LISTBOX_1 has now following values entries:<br>
		<ul><li>key: 0; value: k1 ( 0 )</li>
		<<li>key: 1; value: k2 ( 1 )</li>
		<li>key: 2; value: k3 ( 2 )</li></ul>
	</example>
	
	<example>
	You want to pass the content of the array directly to chart selection.
	<code>
	var valuesAsArray = ARRAY_1.getValuesAsSimpleValueTextArray();<br>
	CHART_1.setDataSelection( {<br>
 		"<your dimension>": valuesAsArray<br>
	});<br>
	</code>
	This CHART will get the corresponding selection<br>
	</example>
	*/
	StringArray getValuesAsSimpleStringArray (
			/**max members*/ optional int maxMembers) {*
		var s = this.items;  
		var items = JSON.parse(s);
		
		var a = [];
		
		// APPLICATION.createInfoMessage("Max: " + maxMembers); // debug
		
		if(maxMembers == undefined || maxMembers <= 0) {
			maxMembers = items.length;
		}
		
		for(var i=0;i<maxMembers;i++){
			var itemDef = items[i].value;
			
			a.push(itemDef);
		}
		
		return a;
	*}
	
	/**
	Generates an array of integers for use in BIAL forEach statement in order to emulate a traditional for loop.
	<example>
	Fill a list box with 10 values:
	<code>ARRAY_1.eaches(0, 9, 1).forEach(function(element, index) {<br>
	LISTBOX_1.addItem(element, "Item " + (element + "") );<br>
	});</code>
	This would be equivalent to a loop in JavaScript:
	<code>
	for(var element = 0;element<=9;element++){<br>
		Your code here.<br>
	}
	</code>
	</example>
	*/
	Array eaches(/*Starting int*/ int start, /* Ending int */ int finish, /* Interval increment */int interval) {*
		var a = [];
		for(var i=start;i<=finish;i+=interval){
			a.push(i);
		}
		return a;
	*}

	/**
	Returns all values as String separated by given optional separator. default separator is comma ,
	<example>
	You have an array with 3 values ["v1", "v2", "v3"]:
	<code>
	var valuesAsString = ARRAY_1.getValues ("|");<br>
	</code>
	
	The "valuesAsString" has now "v1|v2|v3" as content.
	</example>
	*/
	String getValues (
			/*separator*/ optional String separator) {*  
		var s = this.items;  
		var items = JSON.parse(s);  
		var a = [];  
		
		for(var i=0;i<items.length;i++){  
			a.push(items[i].value);  
		}  
		
		if(separator == undefined) {
			separator = ",";
		}
		
		return a.join(separator);  
	*}
	
	/**
	Creates an array of requested length with integers as values (starting at 0). 
	<example>
	You want an array with length 7:
	<code>
	ARRAY_1.createArray(7);<br>
	</code>
	This array has now following values: 0,1,2,3,4,5,6,7
	</example>
	*/
	void createArray (
			/**length*/ int lenght) {*
		var items = [];
			
		for(var i=0; i<lenght; i++){
			var itemDef = {
				"value" : "" + i,
				"text" : "" + i
			};
			
			items.push(itemDef);
		}
		
		this.items = JSON.stringify(items);  
	*}
	
	/**
	 * Removes all Values (clears the array)
	 */
	void removeAllValues () {*
		var items = [];
		this.items = JSON.stringify(items);  
	*}

	/**
	Sets values of the array by string. Optionally a given separator can be specified. This implementation of array allows duplicate keys.
	<example>
	You want to set the string "k1;k2;k3" array:
	<code>
	ARRAY_1.setValues("k1;k2;k3", ";");<br>
	</code>
	This array has now following values: k1,k2,k3
	</example>
	*/
	void setValues (
			/**values*/ String values,
			/**separator*/ optional String separator) {*  
		var items = [];
	
		if(separator == undefined) {
			separator = ",";
		}
			
		var v = values.split(separator);
		
		for(var i=0; i<v.length; i++){
			var itemDef = {
				"value" : v[i],
				"text" : v[i]
			};
			
			items.push(itemDef);
		}
		
		this.items = JSON.stringify(items);  
	*}

	/**
	Adds a value to new or existing array. This implementation of array allows duplicate keys.
	<example>
	You want to create an "k1,k2,k3" array:
	<code>
	ARRAY_1.addValue("k1");<br>
	ARRAY_1.addValue("k2");<br>
	ARRAY_1.addValue("k3");<br>
	</code>
	This array has now following values: k1,k2,k3
	</example>
	*/
	void addValue (
			/*value*/ String value) {*  
		
		var s = this.items;  
		var a = [];  
		if(s!="") a = JSON.parse(s);
		
		var itemDef = {
			"value" : value,
			"text" : value
		};
		
		a.push(itemDef);
		
		this.items = JSON.stringify(a);  
	*}
	
	/**
	 * Returns length of current array
	 */
	int getLength() {*  
		var s = this.items;  
		var a = [];  
		if(s!="") a = JSON.parse(s);
		
		return a.length;  
	*}  

	/**
	Returns value by given index. Indices are 0-based. In case the index does not exist, "N/A" is given back.
	<example>
	You have an "k1,k2,k3" array and want to get value at index 1:
	<code>
	var value1 = ARRAY_1.getValueByIndex(1);<br>
	</code>
	Now "value1" is set to "k2".
	</example>
	*/
	String getValueByIndex ( 
			/* index */ int index) {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		
		var r = "N/A";  
		if(a.length>index){  
			r = a[index].value;  
		}
		
		return r;  
	*}
}

class org.scn.community.utils.CustomCssCollector extends Component {
	
	/**
	 * Adds new CSS by with a key for later work on
	 * 
 	<example>
	You want to add a CSS link
	<code>
	CUSTOMCSSCOLLECTOR_1.addCss("BLUE", "blue_theme.css");	<br>
	</code>
	</example>
 	<example>
	You want to add a disabled CSS link
	<code>
	CUSTOMCSSCOLLECTOR_1.updateCss("BLUE", "blue_theme.css", false);	<br>
	</code>
	</example>
	 */
	void addCss (
			/**CSS Key (must be unique)*/String elementKey, 
			/**CSS Url*/String elementUrl, 
			/**If true (default) it will be loaded*/optional boolean isActive) {*		
		
		if(isActive == undefined) {
			isActive = true;
		}
		
		var itemDef = { 
			"key": elementKey, 
			"url": elementUrl, 
			"act": isActive
			};
	
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			this.elementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.elementsContent);
		
		var alreadyFound = false;
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				alreadyFound = true;
				break;
			}
		}
		
		if(!alreadyFound) {
			elementsJson.push(itemDef);
		}
	
		this.elementsContent = JSON.stringify(elementsJson);
	*}
	
	/**
	 * Updates existing CSS by given key
	 * 
 	<example>
	You want to update a CSS url
	<code>
	CUSTOMCSSCOLLECTOR_1.updateCss("BLUE", "blue_theme.css");	<br>
	</code>
	</example>
 	<example>
	You want to disable a css link
	<code>
	CUSTOMCSSCOLLECTOR_1.updateCss("BLUE", "", false);	<br>
	</code>
	</example>
 	<example>
	You want to enable a css link
	<code>
	CUSTOMCSSCOLLECTOR_1.updateCss("BLUE", "", true);	<br>
	</code>
	</example>
	 */
	void updateCss (
			/**CSS Key (must be unique)*/String elementKey, 
			/**CSS Url*/optional String elementUrl, 
			/**If true (default) it will be loaded*/optional boolean isActive) {*
		
		if (this.elementsContent === undefined || this.elementsContent === "" || this.elementsContent === "<delete>"){
			this.elementsContent = "[]";
		}
		
		var elementsJson = JSON.parse(this.elementsContent);
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				if(elementUrl != undefined && elementUrl != "") {
					elementsJson[i].url = elementUrl;	
				}
				if(isActive != undefined) {
					elementsJson[i].act = isActive;	
				}
				
				break;
			}
		}
		
		this.elementsContent = JSON.stringify(elementsJson);
	*}
}
/**
 * Component created with collaboration with Michael Howles
 * http://scn.sap.com/people/mike.howles4
 * 
 * based on the discussion thread http://scn.sap.com/community/businessobjects-design-studio/blog/2014/09/12/design-studio-sdk--get-topbottom-n-rankings-with-a-little-less-code
 * 
 * Authors: Michael Howles, Scn Community Contributors
 */
class org.scn.community.utils.Collection extends Component {  
	
	/**
	Returns the collection content as loopable array.
	<example>
	You want to loop at the "k1;k2;k3", "l1;l2;l3", "12.4;25.1;94.2" collection:
	<code>
	var content = COLLECTION_1.getAsKeyLabelValueArray();<br>
	<br>
	// a loop for all entries<br>
	content.forEach(function(element, index) {<br>
		LISTBOX_1.addItem(element.key, element.label + "( " + element.value + " )");<br>
	});
	</code>
	This LISTBOX_1 has now following values entries:<br>
		<ul><li>key: k1; value: l1 ( 12.4 )</li>
		<li>key: k2; value: l2 ( 25.1 )</li>
		<li>key: k3; value: l3 ( 94.2 )</li></ul>
	</example>
	*/
	org.scn.community.shared.KeyLabelValueArray getAsKeyLabelValueArray (
			/**max members*/ optional int maxMembers) {*
		var s = this.items;  
		var items = JSON.parse(s);
		
		var a = [];
		
		// APPLICATION.createInfoMessage("Max: " + maxMembers); // debug
		
		if(maxMembers == undefined || maxMembers <= 0 || maxMembers > items.length) {
			maxMembers = items.length;
		}
		
		for(var i=0;i<maxMembers;i++){
			var itemDef = { 
				"key": items[i].key, 
				"label": items[i].label,
				"value": items[i].value
			};
			
			a.push(itemDef);
		}
		
		return a;
	*}

	/**
	Returns the collection content as loopable array.
	<example>
	You want to loop at the "k1;k2;k3", "l1;l2;l3", "12.4;25.1;94.2" collection:
	<code>
	var content = COLLECTION_1.getAsKeyLabelValueArray();<br>
	<br>
	// a loop for all entries<br>
	content.forEach(function(element, index) {<br>
		LISTBOX_1.addItem(element.key, element.label + "( " + element.value + " )");<br>
	});
	</code>
	This LISTBOX_1 has now following values entries:<br>
		<ul><li>key: k1; value: l1 ( 12.4 )</li>
		<li>key: k2; value: l2 ( 25.1 )</li>
		<li>key: k3; value: l3 ( 94.2 )</li></ul>
	</example>
	*/
	org.scn.community.shared.KeyLabelValuePropertyArray getAsKeyLabelValuePropertyArray (
			/**max members*/ optional int maxMembers) {*
		var s = this.items;  
		var items = JSON.parse(s);
		
		var a = [];
		
		// APPLICATION.createInfoMessage("Max: " + maxMembers); // debug
		
		if(maxMembers == undefined || maxMembers <= 0 || maxMembers > items.length) {
			maxMembers = items.length;
		}
		
		for(var i=0;i<maxMembers;i++){
			var itemDef = { 
				"key": items[i].key, 
				"label": items[i].label,
				"value": items[i].value,
				"prop1": items[i].prop1,
				"prop2": items[i].prop2,
				"prop3": items[i].prop3
			};
			
			a.push(itemDef);
		}
		
		return a;
	*}

	/**
	 * Removes all Items (clears the collection)
	 */
	void removeAllItems () {*
		var items = [];
		this.items = JSON.stringify(items);  
	*}
			
	/**
	Sets items of the array by 2 strings: for keys, labels, values. Optionally a given separator can be specified. This implementation of collection allows duplicate keys.
	Values must be float numbers. The content length is equal with number of keys. in case labels or values are shorter, correspondingly an empty label or 0.0 will be inserted. 
	<example>
	You want to set the string "k1;k2;k3" array:
	<code>
	COLLECTION_1.setItems("k1;k2;k3", "l1;l2;l3", "12.4;25.1;94.2", ";");<br>
	</code>
	This array has now following values: k1,k2,k3
	</example>
	*/
	void setItems (
			/*keys*/ String keys, 
			/*labels*/ String labels, 
			/*values*/ String values,
			/*separator*/ optional String separator,
			/*optional prop 1 array*/ optional String prop1s,
			/*optional prop 2 array*/ optional String prop2s,
			/*optional prop 3 array*/ optional String prop3s) {*  
		var items = [];
	
		if(separator == undefined) {
			separator = ",";
		}
			
		if(prop1s == undefined) {
			prop1s = "";
		}
		if(prop2s == undefined) {
			prop2s = "";
		}
		if(prop3s == undefined) {
			prop3s = "";
		}
		
		var k = keys.split(separator);  
		var l = labels.split(separator);  
		var v = values.split(separator);
		
		var p1 = prop1s.split(separator);
		var p2 = prop2s.split(separator);
		var p3 = prop3s.split(separator);
		
		while(k.length>l.length) l.push("");  
		while(k.length>v.length) v.push("0");
		
		while(k.length>p1.length) p1.push("");
		while(k.length>p2.length) p2.push("");
		while(k.length>p3.length) p3.push("");

		for(var i=0; i<k.length; i++){
			var itemDef = {
				"key" : k[i],
				"label" : l[i],  
				"value" : v[i],
				"prop1": p1[i],
				"prop2": p2[i],
				"prop3": p3[i]
			};
			
			items.push(itemDef);
		}
		
		this.items = JSON.stringify(items);  
	*}  

	/**
	Adds a value to new or existing array. This implementation of collection allows duplicate keys. 
	<example>
	You want to create an "k1,k2,k3" array:
	<code>
	COLLECTION_1.addItem("k1", "l1", 45.75);<br>
	COLLECTION_1.addItem("k2", "l2", 11.21);<br>
	COLLECTION_1.addItem("k3", "l3", 85.439);<br>
	</code>
	This array has now following elements with keys: k1,k2,k3
	</example>
	*/
	void addItem (
			/*key*/ String key, 
			/*label*/ String label, 
			/*value*/ float value,
			/*optional prop 1*/ optional String prop1,
			/*optional prop 2*/ optional String prop2,
			/*optional prop 3*/ optional String prop3) {*  
		
		var s = this.items;  
		var a = [];  
		if(s!="") a = JSON.parse(s);
		
		if(prop1 == undefined) {
			prop1 = "";
		}
		if(prop2 == undefined) {
			prop2 = "";
		}
		if(prop3 == undefined) {
			prop3 = "";
		}
		
		var itemDef = {
			"key" : key,
			"label" : label,  
			"value" : value,
			"prop1" : prop1,
			"prop2" : prop2,
			"prop3" : prop3
		};
		
		a.push(itemDef);
		
		this.items = JSON.stringify(a);  
	*}

	/**
	Returns all keys as String separated by given optional separator. default separator is comma ,
	<example>
	You have an array with 3 elements with keys ["K1", "K2", "K3"]:
	<code>
	var keysAsString = COLLECTION_1.getKeys ("|");<br>
	</code>
	
	The "keysAsString" has now "K1|K2|K3" as content.
	</example>
	*/
	String getKeys(
			/*separator*/ optional String separator) {*  
		var s = this.items;  
		var items = JSON.parse(s);
		var a = [];
		
		for(var i=0;i<items.length;i++){  
			a.push(items[i].key);  
		}
		
		if(separator == undefined) {
			separator = ",";
		}
		
		return a.join(separator);  
	*}

	/**
	Returns all labels as String separated by given optional separator. default separator is comma ,
	<example>
	You have an array with 3 elements with labels ["L1", "L2", "L3"]:
	<code>
	var labelsAsString = COLLECTION_1.getLabels ("|");<br>
	</code>
	
	The "labelsAsString" has now "L1|L2|L3" as content.
	</example>
	*/
	String getLabels(
			/*separator*/ optional String separator) {*  
		var s = this.items;  
		var items = JSON.parse(s);  
		var a = [];  
		
		for(var i=0;i<items.length;i++){  
			a.push(items[i].label);  
		}  
		
		if(separator == undefined) {
			separator = ",";
		}
		
		return a.join(separator);  
	*}

	/**
	Returns all values as String separated by given optional separator. default separator is comma ,
	<example>
	You have an array with 3 elements with values ["11.4", "87.66", "147.41"]:
	<code>
	var valuesAsString = COLLECTION_1.getValues ("|");<br>
	</code>
	
	The "valuesAsString" has now "11.4|87.66|147.41" as content.
	</example>
	*/
	String getValues(
			/*separator*/ optional String separator) {*  
		var s = this.items;  
		var items = JSON.parse(s);  
		var a = [];  
		
		for(var i=0;i<items.length;i++){  
			a.push(items[i].value);  
		}  
		
		if(separator == undefined) {
			separator = ",";
		}
		
		return a.join(separator);  
	*}

	/**
	 * Sorts the collection by values with optional parameter for direction (ascending is default)
	 */
	void sortByKey(optional org_scn_community_shared_SortDirectionEnumfield direction) {*
		if(direction == org_scn_community_shared_SortDirection.DESCENDING) {
			this.sortByKeyDescending();
			return;
		}
	
		var s = this.items;  
		var a = JSON.parse(s);  
		
		a.sort(function(a,b){  
			return a.key>b.key;  
		});  
		
		this.items = JSON.stringify(a);  
	*}  

	/**
	 * Sorts the collection by key (descending)
	 */
	void sortByKeyDescending() {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		
		a.sort(function(a,b){  
			return (b.key>a.key);  
		});  
		
		this.items = JSON.stringify(a);  
	*}

	/**
	 * Sorts the collection by values with optional parameter for direction (ascending is default)
	 */
	void sortByLabel(optional org_scn_community_shared_SortDirectionEnumfield direction) {*
		if(direction == org_scn_community_shared_SortDirection.DESCENDING) {
			this.sortByLabelDescending();
			return;
		}

		var s = this.items;  
		var a = JSON.parse(s);  
		
		a.sort(function(a,b){  
			return a.label>b.label;  
		});  
		
		this.items = JSON.stringify(a);  
	*}  
		
	/**
	 * Sorts the collection by labels (descending)
	 */
	void sortByLabelDescending() {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		
		a.sort(function(a,b){  
			return (b.label>a.label);  
		});  
		
		this.items = JSON.stringify(a);  
	*}
		
	/**
	 * Sorts the collection by values with optional parameter for direction (ascending is default)
	 */
	void sortByValue(optional org_scn_community_shared_SortDirectionEnumfield direction) {*
		if(direction == org_scn_community_shared_SortDirection.DESCENDING) {
			this.sortByValueDescending();
			return;
		}

		var s = this.items;  
		var a = JSON.parse(s);  
		
		a.sort(function(a,b){  
			var newA = parseFloat(a.value);  
			var newB = parseFloat(b.value);  
			return newA-newB;  
		});
		
		this.items = JSON.stringify(a);  
	*}  

	/**
	 * Sorts the collection by values (descending)
	 */
	void sortByValueDescending() {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		
		a.sort(function(a,b){  
			var newA = parseFloat(a.value);  
			var newB = parseFloat(b.value);  
			return newB-newA;  
		});
		
		this.items = JSON.stringify(a);  
	*}  
	
	/**
	 * Returns length of current collection
	 */
	int getLength() {*  
		var s = this.items;  
		var a = [];  
		if(s!="") a = JSON.parse(s);
		
		return a.length;  
	*}  

	/**
	Returns label by given index. Indices are 0-based. In case the index does not exist, "N/A" is given back.
	<example>
	You have a "k1,k2,k3" collection with label "Value for Key 2" at index 1 and want to get value at index 1:
	<code>
	var label1 = COLLECTION_1.getLabelByIndex(1);<br>
	</code>
	Now "label1" is set to String "Value for Key 2".
	</example>
	*/
	String getLabelByIndex( 
			/* index */ int index) {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		var r = "N/A";
		
		if(a.length>index){  
			r = a[index].label;  
		}
		
		return r;  
	*}

	/**
	Returns label by given key. In case the key does not exist, "N/A" is given back.
	<example>
	You have a "k1,k2,k3" collection with value "Value for Key 2" at index 1 (key == "k2") and want to get value at key "k2":
	<code>
	var label1 = COLLECTION_1.getLabelByKey("k2");<br>
	</code>
	Now "label1" is set to float "Value for Key 2".
	</example>
	*/
	String getLabelByKey( 
			/* index */ String key) {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		var r = "N/A";
		
		for(var i=0;i<a.length;i++){
			if(a[i].key == key) {
				r = a[i].label;
				break;
			}
		}
		
		return r;  
	*}

	/**
	Returns value by given index. Indices are 0-based. In case the index does not exist, "NaN" is given back.
	<example>
	You have a "k1,k2,k3" collection with value "54.48" at index 1 and want to get value at index 1:
	<code>
	var value1 = COLLECTION_1.getValueByIndexAsString(1);<br>
	</code>
	Now "value1" is set to String "54.48".
	</example>
	*/
	String getValueByIndexAsString( 
			/* index */ int index) {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		var r = "NaN";  
		
		if(a.length>index){  
			r = a[index].value;  
		}  
		
		return r;  
	*}  

	/**
	Returns value by given index. Indices are 0-based. In case the index does not exist, "0.0" is given back.
	<example>
	You have a "k1,k2,k3" collection with value "54.48" at index 1 and want to get value at index 1:
	<code>
	var value1 = COLLECTION_1.getValueByIndex(1);<br>
	</code>
	Now "value1" is set to float "54.48".
	</example>
	*/
	float getValueByIndex( 
			/* index */ int index) {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		
		var r = 0.0;  
		if(a.length>index){  
			r = a[index].value;  
		}
		
		return r;  
	*}

	/**
	Returns value by given key. In case the index does not exist, "NaN" is given back.
	<example>
	You have a "k1,k2,k3" collection with value "54.48" at index 1 (key == "k2") and want to get value at key "k2":
	<code>
	var value1 = COLLECTION_1.getValueByKeyAsString("k2");<br>
	</code>
	Now "value1" is set to String "54.48".
	</example>
	*/
	String getValueByKeyAsString( 
			/* key */ String key) {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		var r = "NaN";  
		
		for(var i=0;i<a.length;i++){
			if(a[i].key == key) {
				r = a[i].value;
				break;
			}
		}
		
		return r;  
	*}  

	/**
	Returns value by given key. In case the index does not exist, "0.0" is given back.
	<example>
	You have a "k1,k2,k3" collection with value "54.48" at index 1 (key == "k2") and want to get value at key "k2":
	<code>
	var value1 = COLLECTION_1.getValueByKey("k2");<br>
	</code>
	Now "value1" is set to float "54.48".
	</example>
	*/
	float getValueByKey(
			/* index */ String key) {*  
		var s = this.items;  
		var a = JSON.parse(s);  
		var r = 0.0;  
		
		for(var i=0;i<a.length;i++){
			if(a[i].key == key) {
				r = a[i].value;
				break;
			}
		}
		
		return r;  
	*}
}
/**
 * Class for OpenWindowPost
 */
class org.scn.community.utils.OpenWindowPost extends Component {
	
	/**
	 * Trigger Execution of the given URL and parameter list
	 */
	void triggerExecution () {*
		this.trigger = "GO";
	*}
	
	/**
	 * Set URL 
	 */
	void setUrl (
			/**url*/String url) {*
		this.url = url;
	*}
	
	/**
	 * Set Window Id 
	 */
	void setWindowId (
			/**window id*/String windowId) {*
		this.formId = windowId;
	*}

	/** 
	 * Add parameter
	 * 
	 */
	void removeAllParameters () {*
		this.parameters = "";
	*}
			
	/** 
	 * Add parameter
	 * 
	 */
	void addParameter (
			/**name*/String name, 
			/**value*/String value) {*
		var itemDef = { 
				"name": name,
				"value": value 
				};
	
		if (this.parameters === undefined || this.parameters === "" || this.parameters === "<delete>"){
			this.parameters = "[]";
		}
		
		var parametersJson = JSON.parse(this.parameters);
		parametersJson.push(itemDef)
	
		this.parameters = JSON.stringify(parametersJson);
	*}
}
