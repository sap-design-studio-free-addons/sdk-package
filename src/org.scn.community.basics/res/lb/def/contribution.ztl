
/**
 * Class for LeaderBoard
 */
class org.scn.community.basics.LeaderBoard extends Component {
	
	/** remove all elements */
	void removeAllElements () {*		
			var elementsArray = [];
			this.elements = JSON.stringify(elementsArray);
	*}
	
	/** add an element containing key, text, imageUrl, value (float) and value (Sting)*/
	void addElement (String elementKey, String elementText, String imageUrl, float value, String valueAsString) {*		
		
		var itemDef = { 
			"key": elementKey, 
			"text": elementText, 
			"url": imageUrl,
			"value": value,
			"valueS": valueAsString
			};
	
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		elementsJson.push(itemDef);
	
		this.elements = JSON.stringify(elementsJson);
	*}
	
	/** insert an element */
	void insertElement (String elementKey, String elementText, String imageUrl, float value, String valueAsString, int insertionIndex0based) {*
		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		var newElementsJson = [];
		
		for (var i = 0; i < elementsJson.length ; i++){
			if (i == insertionIndex0based) {
				var itemDef = { 
						"key": elementKey, 
						"text": elementText, 
						"url": imageUrl,
						"value": value,
						"valueS": valueAsString
						};
				
				newElementsJson.push(itemDef);
			}
			
			newElementsJson.push(elementsJson[i]);
		}

		this.elements = JSON.stringify(newElementsJson);
	*}
	
	/** update given element */
	void updateElement (String elementKey, String elementText, String imageUrl, float value, String valueAsString) {*
		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		
		// loop and find and update
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key == elementKey) {
				elementsJson[i].text = elementText;
				elementsJson[i].url = imageUrl;
				elementsJson[i].value = value;
				elementsJson[i].valueS = valueAsString;
				break;
			}
		}
		
		this.elements = JSON.stringify(elementsJson);
	*}
	
	/** delete an element */
	void deleteElement (String elementKey) {*
		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		var newElementsJson = [];
		
		for (var i = 0; i < elementsJson.length ; i++){
			if (elementsJson[i].key != elementKey) {
				newElementsJson.push(elementsJson[i]);
			}
		}

		this.elements = JSON.stringify(newElementsJson);
	*}
	
	/** returns key at given index */
	String getKeyAtIndex (int index) {*		
		if (this.elements === undefined || this.elements === "" || this.elements === "<delete>"){
			this.elements = "[]";
		}
		
		var elementsJson = JSON.parse(this.elements);
		var newElementsJson = [];
		
		for (var i = 0; i < elementsJson.length ; i++){
			if (index == i) {
				return elementsJson[i].key;
			}
		}
		
		return "";
	*}
	
	/** returns the selected key */
	String getSelectedKey () {*
		return this.selectedKey;	
	*}
	
	/** sets the selected key */
	void setSelectedKey (String key) {*
		this.selectedKey = key;	
	*}

	/** returns the pressed key */
	String getPressedKey () {*
		return this.pressedKey;	
	*}
}
